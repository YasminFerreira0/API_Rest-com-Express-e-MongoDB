REST (representational state transfer ou transferência de estado representacional) representa um padrão para desenvolvimento de APIs web utilizando o protocolo HTTP para transmissão de dados.

API -  É um conjunto de padrões, ferramentas e protocolos que permite que softwares e aplicativos se comuniquem e se integrem. As APIs permitem que dois computadores "entendam" as instruções um do outro, gerando novas instruções a serem realizadas

Criar rotas em uma API, como se conectar e acessar rotas e de que forma as rotas são utilizadas dentro da lógica de uma API REST.



Como instalar e utilizar os métodos do framework Express para criação de um servidor HTTP e também para gerenciamento de requisições, respostas e criação de rotas; 

Como implementar um CRUD inicial com os métodos HTTP GET, POST, PUT e DELETE, e como utilizar os métodos do Express para cada método;

Como testar requisições com Postman e quais são as partes de uma requisição HTTP;

Como utilizar o Express para gerar e enviar respostas adequadas para cada tipo de requisição HTTP.

SQL (Linguagem de Consulta Estruturada) - Uso de tabelas relacionais, são restruturados no formato de tabelas com colunas e linhas. relacionamento entre tabelas

NoSQl (Bancos que nao sao gerenciadores SQL) - Banco de Objetos. São bancos de documentos, facilita o manejo de estruturas mais complexas e ser mais rapido


Shema é um objeto de configuração que define a estrutura e as propriedades de um documento.

Modelo é um objeto que representa uma coleção na base de dados.



Como os bancos de dados atuam integrados a uma API, guardando os dados recebidos e processados pela API;
Quais são as principais diferenças entre tipos de bancos de dados SQL e NoSQL e alguns casos de uso de cada tipo de banco;
Como utilizar uma instância gratuita de um banco MongoDB na nuvem através do serviço Mongo Atlas e conectar a instância com a API;
Os conceitos de model e schema e qual a função de cada na construção de uma API.


Models
Os models são responsáveis pela representação dos dados e da lógica de negócio da aplicação, ou seja, é responsabilidade do model gerenciar o relacionamento entre a API e a camada de dados, incluindo validação, armazenamento e manipulação dos dados, interação com a base de dados e suas regras.
Em nossa API, a conexão entre o model e o banco de dados está sendo feito através dos métodos da biblioteca Mongoose

Controllers
Os controllers atuam como intermediários entre a camada responsável pelo recebimento dos inputs de dados, que em nossa API está sendo feito através das rotas, e os models. Controllers também são a camada responsável pelo “caminho inverso”, pegando o resultado do processamento feito pelos models e “repassando” de volta.

A organizar a estrutura do código de um projeto de API utilizando o padrão chamado controller;
A evoluir as funcionalidades da API organizando as chamadas da lib Mongoose em métodos separados em um controller;
A praticar a implementação do CRUD (Create, Read, Update e Delete) com as respostas HTTP e as rotas correspondentes.

Em bancos SQL, a avaliação de requisitos e modelagem dos dados costuma ser feita de forma adiantada com relação à aplicação, pois o SQL é, por definição, mais “estrito” com relação à estrutura de um banco, aos tipos de dados associados a cada campo e ao relacionamento entre as tabelas.

Já em um banco de objetos como o MongoDB, esta estrutura é menos rígida e pode ser atualizada de acordo com as necessidades da aplicação, então, dois documentos livro podem ser diferentes entre si sem que para isso sejam necessárias alterações significativas na base de dados.

Porém, em ambos os tipos de banco existem três tipos de relacionamentos entre dados. São eles:

    Relacionamento “um para um” (one-to-one ou 1:1), quando um registro está conectado a somente outro registro em outro conjunto de dados.

    Relacionamento “um para muitos” (one-to-many ou 1:n), quando um registro pode ser conectado a mais de um registro em outro conjunto de dados.

    Relacionamento “muitos para muitos” (many-to-many ou n:m), quando mais de um registro pode estar relacionado a mais de um registro em outro conjunto. 

Embedding
Ao contrário do SQL, o MongoDB segue o princípio de “dados que são acessados juntos devem ser armazenados juntos”.

Pensando assim, embedding significa incorporar dados que são relacionados e inseri-los em um documento. É usado para simplificar as consultas (queries) aos dados e melhorar a performance geral das ferramentas nas consultas.

Referencing
Referencing significa fazer referência a documentos em outra coleção. Nesse caso, os dados são guardados em coleções separadas, mas ainda é importante que mantenham vínculo entre eles. A referência é feita através de um campo específico do documento, normalmente o campo id ou equivalente.

A agregação de dados via reference visa evitar duplicação de dados (um aspecto muito importante no SQL, também chamada de “normalização de dados”) e também gerenciar o tamanho dos documentos para evitar a criação de documentos muito grandes, que prejudicariam a performance do sistema.


A evoluir as funcionalidades de uma API, unindo diferentes entidades como livro e autor;
Como funciona o relacionamento em um banco de objetos como MongoDB utilizando o modelo de embedding;
Como realizar buscas em API via parâmetros de query.