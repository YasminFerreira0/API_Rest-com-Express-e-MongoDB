REST (representational state transfer ou transferência de estado representacional) representa um padrão para desenvolvimento de APIs web utilizando o protocolo HTTP para transmissão de dados.

API -  É um conjunto de padrões, ferramentas e protocolos que permite que softwares e aplicativos se comuniquem e se integrem. As APIs permitem que dois computadores "entendam" as instruções um do outro, gerando novas instruções a serem realizadas

Criar rotas em uma API, como se conectar e acessar rotas e de que forma as rotas são utilizadas dentro da lógica de uma API REST.



Como instalar e utilizar os métodos do framework Express para criação de um servidor HTTP e também para gerenciamento de requisições, respostas e criação de rotas; 

Como implementar um CRUD inicial com os métodos HTTP GET, POST, PUT e DELETE, e como utilizar os métodos do Express para cada método;

Como testar requisições com Postman e quais são as partes de uma requisição HTTP;

Como utilizar o Express para gerar e enviar respostas adequadas para cada tipo de requisição HTTP.

SQL (Linguagem de Consulta Estruturada) - Uso de tabelas relacionais, são restruturados no formato de tabelas com colunas e linhas. relacionamento entre tabelas

NoSQl (Bancos que nao sao gerenciadores SQL) - Banco de Objetos. São bancos de documentos, facilita o manejo de estruturas mais complexas e ser mais rapido


Shema é um objeto de configuração que define a estrutura e as propriedades de um documento.

Modelo é um objeto que representa uma coleção na base de dados.



Como os bancos de dados atuam integrados a uma API, guardando os dados recebidos e processados pela API;
Quais são as principais diferenças entre tipos de bancos de dados SQL e NoSQL e alguns casos de uso de cada tipo de banco;
Como utilizar uma instância gratuita de um banco MongoDB na nuvem através do serviço Mongo Atlas e conectar a instância com a API;
Os conceitos de model e schema e qual a função de cada na construção de uma API.


Models
Os models são responsáveis pela representação dos dados e da lógica de negócio da aplicação, ou seja, é responsabilidade do model gerenciar o relacionamento entre a API e a camada de dados, incluindo validação, armazenamento e manipulação dos dados, interação com a base de dados e suas regras.
Em nossa API, a conexão entre o model e o banco de dados está sendo feito através dos métodos da biblioteca Mongoose

Controllers
Os controllers atuam como intermediários entre a camada responsável pelo recebimento dos inputs de dados, que em nossa API está sendo feito através das rotas, e os models. Controllers também são a camada responsável pelo “caminho inverso”, pegando o resultado do processamento feito pelos models e “repassando” de volta.

A organizar a estrutura do código de um projeto de API utilizando o padrão chamado controller;
A evoluir as funcionalidades da API organizando as chamadas da lib Mongoose em métodos separados em um controller;
A praticar a implementação do CRUD (Create, Read, Update e Delete) com as respostas HTTP e as rotas correspondentes.
